>>> Test Descriptor File
Title: test with high number of features
Date: 2018-04-25 15:52:00.500077
Summary: Test with high number of features (note the little value of
	the learning rate I've been forced to use).


### BEGIN SETUP ###
n = 10
seed = 1524664320
graphs = {
    'clique': array([
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
    ]),
    'cycle': array([
        [1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 1.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.]
    ]),
    'diam-expander': array([
        [1., 1., 0., 0., 0., 1., 0., 0., 0., 1.],
        [1., 1., 1., 0., 0., 0., 1., 0., 0., 0.],
        [0., 1., 1., 1., 0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 1., 1., 0., 0., 0., 1., 0.],
        [0., 0., 0., 1., 1., 1., 0., 0., 0., 1.],
        [1., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 1., 1., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0., 1., 1., 1., 0.],
        [0., 0., 0., 1., 0., 0., 0., 1., 1., 1.],
        [1., 0., 0., 0., 1., 0., 0., 0., 1., 1.]
    ]),
    'root-expander': array([
        [1., 1., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 1., 1., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 1., 1., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 1., 1., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 1., 1., 0., 1.],
        [1., 0., 0., 0., 0., 0., 0., 1., 1., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 1., 1.],
        [1., 0., 1., 0., 0., 0., 0., 0., 0., 1.]
    ]),
    'diagonal': array([
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]
    ])
}

# TRAINING SET SETUP
n_samples = 1000
n_features = 10000
yhat = <class 'src.mltoolbox.LinearYHatFunction'>
domain_radius = 5
domain_center = 0
error_mean = 0
error_std_dev = 1

# CLUSTER SETUP
sample_function = <function LinearYHatFunction.f at 0x7f8db8fdc0d0>
max_iter = None
max_time = 20000
method = stochastic
batch_size = 20
activation_func = None
loss = <class 'src.mltoolbox.SquaredLossFunction'>
penalty = l2
epsilon = None
alpha = 1e-06
learning_rate = constant
metrics = all
alt_metrics = False
shuffle = True
verbose = False
