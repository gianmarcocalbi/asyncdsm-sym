>>> Test Descriptor File
Title: test
Date: 2018-06-20 11:24:53.495545
Summary: 


### BEGIN SETUP ###
n = 100
seed = 1529486693
graphs = {   '0_diagonal': np.array([[1., 0., 0., ..., 0., 0., 0.],
       [0., 1., 0., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 0., 0.],
       [0., 0., 0., ..., 0., 1., 0.],
       [0., 0., 0., ..., 0., 0., 1.]]),
    '1_cycle': np.array([[1., 1., 0., ..., 0., 0., 0.],
       [0., 1., 1., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 1., 0.],
       [0., 0., 0., ..., 0., 1., 1.],
       [1., 0., 0., ..., 0., 0., 1.]]),
    '2_root-expander': np.array([[1., 1., 0., ..., 0., 0., 0.],
       [0., 1., 1., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 1., 0.],
       [0., 0., 0., ..., 0., 1., 1.],
       [1., 0., 0., ..., 0., 0., 1.]]),
    '3_regular': np.array([[1., 1., 0., ..., 0., 0., 0.],
       [0., 1., 1., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 1., 0.],
       [0., 0., 0., ..., 0., 1., 1.],
       [1., 0., 0., ..., 0., 0., 1.]]),
    '4_regular': np.array([[1., 1., 0., ..., 0., 0., 0.],
       [0., 1., 1., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 1., 0.],
       [0., 0., 0., ..., 0., 1., 1.],
       [1., 0., 0., ..., 0., 0., 1.]]),
    '5_regular': np.array([[1., 1., 0., ..., 0., 0., 0.],
       [0., 1., 1., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 1., 0.],
       [0., 0., 0., ..., 0., 1., 1.],
       [1., 0., 0., ..., 0., 0., 1.]]),
    '6_regular': np.array([[1., 1., 0., ..., 0., 0., 0.],
       [0., 1., 1., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 1., 0.],
       [0., 0., 0., ..., 0., 1., 1.],
       [1., 0., 0., ..., 0., 0., 1.]]),
    '7_regular': np.array([[1., 1., 0., ..., 0., 0., 0.],
       [0., 1., 1., ..., 0., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 1., 1., 0.],
       [0., 0., 0., ..., 0., 1., 1.],
       [1., 0., 0., ..., 0., 0., 1.]])}

# TRAINING SET SETUP
n_samples = 100000
n_features = 100
generator_function = reg
sample_function = <function LinearYHatFunction.f at 0x7f0c65c7b488>
domain_radius = 6
domain_center = 0
smv_label_flip_prob = 0.05
error_mean = 0
error_std_dev = 0
starting_weights_domain = [-7.664410261088139, 4.298030587807557]
node_error_mean = 0
node_error_std_dev = 0

# CLUSTER SETUP
max_iter = None
max_time = 10000
yhat = <class 'src.mltoolbox.LinearYHatFunction'>
method = classic
batch_size = 20
dual_averaging_radius=1000
activation_func = None
loss = <class 'src.mltoolbox.SquaredLossFunction'>
penalty = l2
epsilon = None
alpha = 0.0001
learning_rate = constant
metrics = ()
metrics_type = 0
metrics_nodes = all
shuffle = True
verbose = False
time_distr_class = <class 'src.statistics.Type2ParetoDistribution'>
time_distr_param = [3, 2]
time_const_weight = 0.5


# duration (hh:mm:ss): 00:20:10